name: Daily Poe Bot Crawler

# TODO：action提交output文件夹内容，pull不拉取，push不提交

on:
  schedule:
    # - cron: '0 0 * * *' # 北京时间上午08:00（UTC+8）
  workflow_dispatch: # 允许手动触发工作流

# 为整个工作流设置权限
permissions: write-all

# 确保工作流能够运行
env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  crawl:
    runs-on: ubuntu-latest
    timeout-minutes: 300 # 添加超时限制
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true # 如果有新的运行，取消正在进行的任务
    steps:
      - name: Debug Trigger
        run: |
          echo "Event that triggered the workflow: ${{ github.event_name }}"
          echo "Current time: $(date)"
          echo "Current UTC time: $(date -u)"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史以便正确提交

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # 启用依赖缓存

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Create .env file with secrets
        run: |
          echo "P_B=${{ secrets.P_B }}" > .env
          echo "P_LAT=${{ secrets.P_LAT }}" >> .env
          # 验证.env文件已创建（不显示内容）
          ls -la .env

      - name: Debug environment
        run: |
          echo "Python version: $(python --version)"
          echo "Installed packages:"
          pip list
          echo "Working directory: $(pwd)"
          echo "Secret variables existence check:"
          echo "P_B exists: ${{ secrets.P_B != '' }}"
          echo "P_LAT exists: ${{ secrets.P_LAT != '' }}"

      - name: Run Poe crawler
        run: |
          # 验证环境变量是否可以加载
          python -c "from dotenv import load_dotenv; import os; load_dotenv(); print('P_B loaded:', bool(os.getenv('P_B'))); print('P_LAT loaded:', bool(os.getenv('P_LAT')))"

          # 确保目录结构存在
          mkdir -p output/result/history output/json output/bots logs

          # 运行爬虫程序
          python -m src.main

          # 确保运行维护程序
          python -m src.maintenance --all

          # 显示结果文件
          echo "===== 生成的结果文件 ====="
          ls -la output/json/
          echo "===== HTML文件 ====="
          ls -la output/result/history/
          echo "===== index.html ====="
          ls -la output/result/index.html
          echo "===== 日志文件 ====="
          ls -la logs/

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: poe-data-${{ github.run_id }}
          path: |
            output/
            logs/
          retention-days: 30
          if-no-files-found: warn

      - name: Commit and push changes
        run: |
          DATE=$(date +'%Y-%m-%d')
          # 只添加未被忽略的目录
          git add output/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Poe data - $DATE"
            git push
          fi
